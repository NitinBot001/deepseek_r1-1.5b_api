name: Run OLLAMA Server with Proxy (Windows + Docker)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # Runs every 6 hours

jobs:
  run-ollama-with-proxy:
    runs-on: windows-latest
    timeout-minutes: 350  # Prevent auto-timeout

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker
        run: |
          choco install docker-desktop --yes
          Start-Service docker
          echo "Docker installed successfully!"

      - name: Run Ollama in Docker
        run: |
          docker pull ollama/ollama
          docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
          echo "Ollama is running in Docker!"

      - name: Install Python and Flask
        run: |
          choco install python --yes
          pip install flask requests

      - name: Start Proxy Server
        run: |
          echo @"
          from flask import Flask, request, jsonify
          import requests

          app = Flask(__name__)
          OLLAMA_BASE_URL = "http://localhost:11434"

          @app.route('/<path:endpoint>', methods=['GET', 'POST', 'PUT', 'DELETE'])
          def proxy_ollama(endpoint):
              url = f"{OLLAMA_BASE_URL}/{endpoint}"
              try:
                  if request.method == 'GET':
                      response = requests.get(url, params=request.args)
                  elif request.method == 'POST':
                      response = requests.post(url, json=request.json)
                  elif request.method == 'PUT':
                      response = requests.put(url, json=request.json)
                  elif request.method == 'DELETE':
                      response = requests.delete(url)

                  return jsonify(response.json()), response.status_code
              except requests.exceptions.RequestException as e:
                  return jsonify({"error": "Ollama server unreachable", "details": str(e)}), 500

          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=1002, debug=True)
          "@ > proxy.py

          Start-Process -NoNewWindow -FilePath "python" -ArgumentList "proxy.py"

      - name: Generate Random Subdomain Name
        run: |
          $randomString = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 8 | ForEach-Object { [char]$_ })
          echo "SUBDOMAIN=$randomString" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Start Tunnel for Proxy and Save URL
        run: |
          choco install nodejs --yes
          Start-Process -NoNewWindow -FilePath "npx" -ArgumentList "nport -s $env:SUBDOMAIN -p 1002"
          Start-Sleep -Seconds 5

          # Construct tunnel URL
          $TUNNEL_URL = "https://$env:SUBDOMAIN.nport.dev"

          # Save URL to instance.json
          echo "{ `"tunnel_url`": `"$TUNNEL_URL`" }" | Out-File -Encoding utf8 -FilePath "instance.json"
          Get-Content "instance.json"

      - name: Commit and Push instance.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add instance.json
          git commit -m "Update instance.json with new tunnel URL"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Keep Job Alive
        run: |
          echo "Keeping workflow alive..."
          while ($true) { Start-Sleep -Seconds 60 }
