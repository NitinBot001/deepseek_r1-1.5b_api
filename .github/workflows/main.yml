name: AI Service Orchestrator

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-service]

jobs:
  service-instance:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate unique ID
      id: uid
      run: |
        UUID=$(uuidgen | cut -d'-' -f1)
        echo "instance_id=ai-$UUID" >> $GITHUB_OUTPUT

    - name: Setup environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Create Python application
      run: |
        cat > app.py <<EOL
        from flask import Flask, request, Response, stream_with_context
        import requests

        app = Flask(__name__)

        MODEL_MAPPINGS = {
            "llama33": "Hepzeka.com | Llama-3.3-70B-Instruct",
            "deepseekr1": "DeepSeek-R1-Distill-Qwen-32B",
            "phi35m": "Phi-3.5-mini-instruct",
            "mistralnemo": "Mistral-Nemo-Instruct-2407",
            "smallthinker3b": "SmallThinker-3B-Preview",
            "llama32vision": "Llama-3.2-11B-Vision-Instruct"
        }

        DEFAULT_MODEL = "Hepzeka.com | Llama-3.3-70B-Instruct"
        DEFAULT_TEMPERATURE = 0.7
        DEFAULT_TOP_P = 0.9
        DEFAULT_WEB_SEARCH = False

        def fetch_context():
            try:
                response = requests.get('https://raw.githubusercontent.com/NitinBot001/Unlimitedrdp/refs/heads/main/context.txt')
                return response.text
            except Exception as e:
                print('Error fetching context:', e)
                return None

        @app.route('/get-convid', methods=['POST'])
        def get_convid():
            try:
                context = fetch_context()
                response = requests.post(
                    'https://mukaist-chatbot-ui-with-api.hf.space/create',
                    json={"system_prompt": context},
                    headers={
                        'authority': 'mukaist-chatbot-ui-with-api.hf.space',
                        'accept': '*/*',
                        'content-type': 'application/json',
                        'origin': 'https://mukaist-chatbot-ui-with-api.hf.space',
                        'referer': 'https://mukaist-chatbot-ui-with-api.hf.space/',
                        'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Mobile Safari/537.36'
                    }
                )
                return {"convid": response.json().get('convId')}
            except Exception as e:
                return {"error": "Failed to get conversation ID"}, 500

        @app.route('/get-response', methods=['POST'])
        def get_response():
            data = request.json
            convid = data.get('convid')
            prompt = data.get('prompt')
            model = data.get('model', DEFAULT_MODEL)
            
            try:
                response = requests.post(
                    'https://mukaist-chatbot-ui-with-api.hf.space/completions',
                    json={
                        "model": MODEL_MAPPINGS.get(model, DEFAULT_MODEL),
                        "prompt": f"{fetch_context()}\n\n{prompt}",
                        "convId": convid,
                        "temperature": data.get('temperature', DEFAULT_TEMPERATURE),
                        "top_p": data.get('top_p', DEFAULT_TOP_P),
                        "webSearch": data.get('ws', DEFAULT_WEB_SEARCH)
                    },
                    headers={
                        'content-type': 'application/json',
                        'origin': 'https://mukaist-chatbot-ui-with-api.hf.space',
                        'referer': 'https://mukaist-chatbot-ui-with-api.hf.space/'
                    },
                    stream=True
                )

                def generate():
                    for chunk in response.iter_content(chunk_size=1024):
                        yield chunk

                return Response(
                    stream_with_context(generate()),
                    content_type=response.headers.get('Content-Type', 'text/html')
                )
            except Exception as e:
                return {"error": "Failed to get response from chatbot"}, 500

        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000)
        EOL

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask requests gunicorn gevent

    - name: Install Node.js dependencies
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm install -g nport

    - name: Launch service cluster
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        # Start Gunicorn with gevent workers
        gunicorn -b 0.0.0.0:5000 app:app \
          --worker-class gevent \
          --timeout 120 \
          --access-logfile - \
          --error-logfile - > app.log 2>&1 &

        # Start tunnel
        npx nport -s ${{ steps.uid.outputs.instance_id }} -p 5000 > tunnel.log 2>&1 &

        # Wait for tunnel to establish and extract URL
        sleep 10
        TUNNEL_URL=$(grep -oP 'your domain is: \Khttps://\S+' tunnel.log)
        
        echo "Extracted Tunnel URL: $TUNNEL_URL"

        # Create instance.json file
        echo "{ \"tunnel_url\": \"$TUNNEL_URL\" }" > instance.json

        # Commit and push to the repository
        git config --global user.email "github-actions@github.com"
        git config --global user.name "github-actions"

        git clone https://x-access-token:$GH_PAT@github.com/NitinBot001/Audio-url-new-js.git repo
        cd repo

        mv ../instance.json instance.json
        git add instance.json
        git commit -m "Update tunnel URL to $TUNNEL_URL"
        git push origin main

        # Trigger next instance at 5.5 hours
        (sleep 19800 && 
        curl -X POST "https://api.github.com/repos/${{ github.repository }}/dispatches" \
          -H "Authorization: Bearer $GH_PAT" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -d '{"event_type": "trigger-service"}') &

        # Keep alive for full duration
        sleep 21600
